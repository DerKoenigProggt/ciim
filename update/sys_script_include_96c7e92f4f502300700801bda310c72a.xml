<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_204937_ciim.ProcessCI</api_name>
        <client_callable>false</client_callable>
        <description>Verarbeitet die gespeicherten Einträge aus der Importtabelle</description>
        <name>ProcessCI</name>
        <script><![CDATA[/**
 * Dieses Skript verarbeitet alle zwischengespeicherten CI 
 * aus der [Importtable]. Es kann einzelne CI anlegen aber
 * auch Pärchen aus CI + CI + Relation. Tritt ein Fehler auf
 * wird die gesamte Verarbeitung des Datensatzen abgelehnt und
 * ein Fehlerzähler wird erhöht. Der Vorgang kann wiederholt werden
 * und zwar solange bis der Fehlerzähler einen kritischen Bereich 
 * erreicht. Es wird (derzeit) ein Incident erzeugt, dass über
 * ein Template beliebig steuerbar ist. Die weitere Verarbeitung
 * des fehlerhaften Datensatzes wird unterbunden.
 *
 * Die Hauptfunktion .processAll() kann manuell gestartet
 * oder über die Aufgabenplanung ausgeführt werden. 
 *
 * @author Enrico Schautschik
 * @version 1.0
 */

var syslog = new SysLog();
var ProcessCI = Class.create();
ProcessCI.prototype = {
    initialize: function() {

		// In scoped Apps wird ein Plugin "IdentificationEngineScriptableApi" 
		// benötigt, welches im System aktiv sein muss. Wenn es aktiv ist
		// gibt es eine Variable/Objekt namens sn_cmdb
		syslog.addDebugMessage("Prüfe System ob Plugin 'Configuration " 
							   + "Management For Scoped Apps (CMDB)' aktiv ist" );
		
        if (typeof sn_cmdb === "undefined") 
		{	
			syslog.addErrorMessage("Missing Plugin 'Configuration Management" +
								   " For Scoped Apps (CMDB)'");
		
			throw "critical error: Missing plugin sn_cmdb";
        }
		
		this.scope = "x_204937_ciim";
		this.name = "CI Import Manager";
		this.importTable = this.scope + "_" + "importtable";
		this.maxTries = gs.getProperty(this.scope + "." + "maxTriesToError");
		this.discovery_source = gs.getProperty(this.scope + "." + 'discovery_source');
		
		//Importtabelle initialisieren
        this.gr = new GlideRecord(this.importTable);
        if (!this.gr.isValid()) {
			syslog.addErrorMessage("An error occured while opening the import table.");
			
			throw "critical error: Cannot initialize importtable";
        }
		
		this.errorHandler = new ErrorHandler();
		
    },
	
	/**
	*	Verarbeitet alle zwischengespeicherten
	*	Datensätze aus der Importtabelle. Sie
	*	sollte über einen Eintrag im Aufgabenplaner
	*	des Systems aufgerufen werden.
	*/    
	processAll: function() {
		

        /* 
			---- Anpassen der Abfrage ----
			Nur Datensätze (DS) dessen Fehlerzähler <= [maxTriesToError]
			Nur DS, die noch nicht integriert sind
			Sortiere nach Erstellungsdatum, um ggf. ältere DS durch 
			neuere zu überschreiben
		*/
		var gr = this.gr;
		gr.addQuery('errcounter<=' + this.maxTries );
		gr.addQuery('integrated=false');
        gr.orderBy('sys_created_on');
        gr.query();		
		
		// Durchlaufe jeden Eintrag der Import Tabelle
		// und versuche ihn zu integrieren
		while (gr.next()) {
			
			var result = this._addCI( gr.getValue('strjson') ) ;
			
			gr.lastmessage = result.text;
			
			// Bei Erfolg markiere den Datensatz als erledigt
			// Bei Misserfolg zähle den errcounter hoch
			if (result.hasError == false){
				
				//gr.setValue("integrated", true);
				//gr.setValue('errcounter', 42);
				
			}
			else {
				
				var errcounter = parseInt( gr.getValue('errcounter') );
				errcounter++;
				gr.setValue('errcounter', errcounter);

				if (errcounter == (this.maxTries + 1))
				{
					// Der Datensatz ist zu oft auf einen Fehler
					// gelaufen. Melde den Fehler. 
					var errorMessage = "Input: " + gr.getValue('strjson') + "\n" 
										+ "result: " + result.text;
					
					this.ErrorHandler.error(errorMessage);
				}
				
			}

            gr.update();			
			
		}
		
		
		
	},
	
    /*
		_addCI erzeugt echte CI im System aus den übergebenen
		Parameter.

		@params param String Ein CI Datensatz als JSON-String
		@return Object Ein Objekt mit hasError(true/false) und 
		                          text(IdentificationEngine-result)
 	*/
    _addCI: function(params) {
		
		var JSON = new global.JSON(); 
		var result = {hasError:false, text:"" };
		
        // CI anlegen unter Verwendung der IdentificationEngine
		try{
			
			result.text = sn_cmdb.IdentificationEngine.createOrUpdateCI(
				this.discovery_source, params);
			
		}
		catch(error){
			
			// kritischer Fehler aufgefangen. [params] ist defekt
			result.hasError = true;
			result.result = error;
			return result;
			
		}

		
		// Rückgabe ist ein String, der falls ein Fehler aufgetreten ist
		// ein oder mehrere 'errors' Auflistungen enthält. Falls ein
		// Fehler aufgetreten breche ab.
		if (result.text.indexOf("errors") > 0) {
			result.hasError = true;	
			return result;
		}
		

		var objResult = JSON.decode(result.text);
		var objParams = JSON.decode(params);	
		var i = 0;
		
		// Durchlaufe das Ergebnis, extrahiere die sys_id,
		// rufe den Datensatz mit sys_id als GlideRecord auf
		// und aktualisiere Datensatz. Dadurch werden
		// auch die Referenzen aufgelöst und gespeichert.
		for (i = 0; i < objResult.items.length; i++) {
				
			// Besorge das GlideRecord zur sysId und positioniere
			// den Zeiger auf den Datensatz
			var gr = this._getGrFromSysId(objResult.items[i].className, 
										  objResult.items[i].sysId);
			
			// Löse die Felder/Feldwerte aus items und aktualisere das
			// CI erneut aber diesmal per GlideRecdord
			var values = objParams.items[i].values;
			
			for (var key in values ) {
				
				// setDisplayValue löst Referenzen auf :)
				syslog.addDebugMessage("Aktualisiere GlideRecord key: " 
									   + key + " value: " + values[key]);
				gr[key].setDisplayValue(values[key]);
				
			}
			
			gr.update();
			
			// Ist ein Fehler beim Speichern aufgetreten,
			// kann er jetzt behandelt werden. Dazu gliedern
			// wir ein error-Array in das Result ein. Genau 
			// so wie die IdentificationEngine es tun würde
			var strErr = gr.getLastErrorMessage();
			if ( strErr != null ){
				var error = {"INVALID_INPUT_DATA":strErr};
				objResult.items[i].error = [];
				objResult.items[i].error.push(error);
				
				result.hasError = true;
			}
		}
		
		result.text = JSON.encode(objResult);
		
        return result;
		
    },
	
	/**
		Liefert zu einer SysId + Klasse einen selektierten GlideRecord 
		@param className
		@param sysId
		@return GlideRecord
	*/
	_getGrFromSysId: function(className, sysId){
		
		syslog.addDebugMessage("Ermittle GlideRecord für sysid: " 
							   + sysId + " und className: " + className);
		var gr = new GlideRecord(className);
		gr.addQuery("sys_id", sysId);
		gr.query();
		gr.next();
		return gr;
		
	},	
	
    type: 'ProcessCI'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-09-08 09:25:29</sys_created_on>
        <sys_id>96c7e92f4f502300700801bda310c72a</sys_id>
        <sys_mod_count>54</sys_mod_count>
        <sys_name>ProcessCI</sys_name>
        <sys_package display_value="CI Import Manager" source="x_204937_ciim">9910e1e74f502300700801bda310c758</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="CI Import Manager">9910e1e74f502300700801bda310c758</sys_scope>
        <sys_update_name>sys_script_include_96c7e92f4f502300700801bda310c72a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-09-11 17:52:51</sys_updated_on>
    </sys_script_include>
</record_update>
